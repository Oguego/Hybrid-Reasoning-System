package edu.casetools.icase.argumentation;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.*;

import edu.casetools.icase.mreasoner.compiler.MSpecificationLoader;
import edu.casetools.icase.mreasoner.core.MSpecification;
import edu.casetools.icase.mreasoner.core.elements.rules.SameTimeRule;
import edu.casetools.icase.mreasoner.core.elements.states.State;

import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector; 

public class RulesCompiler {
	
//  public static void main1(String[] args) throws Exception { 
//	  ArrayList<String> yes = new ArrayList<String>();
//	  ArrayList<String> not = new ArrayList<String>();
//	  String test;
//	  
//    // pass the path to the file as a parameter
//    File file = new File("C:\\Users\\Chimezie\\MRule.txt");
//    Scanner sc = new Scanner(file);
//    
//    //.substring(0,4).equals("ssr")
//  
//    while (sc.hasNextLine()) 
//      System.out.println(sc.nextLine());
//    
//    //sc.match();
//   
//    //if(sc.equals("ssr(") && sc.hasNext(" -> #"))
//    if(sc.toString().substring(0,3).equals("ssr") && sc.hasNext(" -> #"))
//    {
//    	System.out.println("File has content");
//    	 //not.add(sc.nextLine());
//    	//System.out.println("Positive Consequences(s) " + not); 
//    }
//
//  }
  
 public static void main(String[] args) throws Exception {
	  
	  MSpecificationLoader loader = new MSpecificationLoader();
	  MSpecification mSpecifications = loader.readSystemSpecifications_RealTime("C:\\Users\\Chimezie\\MRule.txt");
	  
	  
	  Vector<SameTimeRule>  sameTimeRules = mSpecifications.getSystemRules().getSameTimeRules();
	  for(int i=0;i<sameTimeRules.size();i++){
		  sameTimeRules.get(i).printRule();
	  }
	  checkForPossibleConflicts(sameTimeRules, mSpecifications.getSystemStatus().getSystemStatus());
  }
  
	  
  public static void checkForPossibleConflicts(Vector<SameTimeRule>  sameTimeRules, Vector<State> systemStatus){
		
  	SameTimeRuleManager ruleManager = new SameTimeRuleManager();
  	ruleManager.rules = sameTimeRules;
  	ruleManager.systemStatus = systemStatus;
 
  	if(ruleManager.rules.size()>1){ 
  		ruleManager.compareRulesForArgumentation();  	
  	}
  }
  
}



//public class RulesCompiler {
//	public static String nextLine;
//	
//	//public void readFile(){
//	public static void main(String[] args) throws Exception {
//		
//		
//	 try {
//         BufferedReader inputReader = new BufferedReader(new FileReader("MRule.txt"));
//
//         while ((nextLine = inputReader.readLine()) != null){
//        	 if (nextLine.equals("ssr((")) {
//        	     //do something
//        		 System.out.println();
//        	   }
//        	 }
//
//     } catch (FileNotFoundException e1) {
//         // TODO Auto-generated catch block
//         e1.printStackTrace();
//     } catch (IOException ep) {
//         // TODO Auto-generated catch block
//         ep.printStackTrace();
//     }
//	}
//	  	
//}
