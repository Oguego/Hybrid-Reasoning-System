package edu.casetools.icase.argumentation;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.JOptionPane;

import edu.casetools.icase.mreasoner.core.elements.rules.SameTimeRule;
import edu.casetools.icase.mreasoner.core.elements.states.State;


public class SameTimeRuleManager{

	protected State consequence;
	private Connection conn = null;
	private Statement stmt = null;
	public Vector<SameTimeRule> rules;
	private MySQL_ArgumentationDBOperations db;

	public SameTimeRuleManager() {
		rules = new Vector<SameTimeRule>();
		db = new MySQL_ArgumentationDBOperations();
		db.connect();
	}			

	//	public void compareRules(){
	//		int numberConflicts = 0;
	//		List<String> displayList = new ArrayList<>();
	//		ConflictAnalyser conflictAnalyser;
	//		for(int i=0;i<rules.size();i++){
	//			for(int j=i+1;j<rules.size();j++){
	//				conflictAnalyser = new ConflictAnalyser(rules.get(i),rules.get(j));
	//				if(rules.get(i).isConflict(rules.get(j))){ //not recent comment
	//				if(conflictAnalyser.isConflict()){
	//					//Save conflicts
	//					
	//					long millis=System.currentTimeMillis();  
	//					java.sql.Date todayDate=new java.sql.Date(millis);  				
	//					String temporalDate = todayDate.toString();	
	//
	//					String consequence1, consequence2;
	//					consequence1 = rules.get(i).getConsequence().getName();
	//					if(!rules.get(i).getConsequence().getStatus()){
	//						consequence1 = "!" + consequence1;
	//					}
	//
	//					consequence2 = rules.get(j).getConsequence().getName();
	//					if(!rules.get(j).getConsequence().getStatus()){
	//						consequence2 = "!" + consequence2;
	//					}
	//					
	//					db.insertConflict(consequence1, consequence2);
	//
	//					numberConflicts ++;
	//				}
	//
	//				displayList.add(conflictAnalyser.getDisplay());
	//			}
	//		}
	//		System.out.println("There are " + numberConflicts + " conflicts.");
	//		if(numberConflicts == 1){
	//			infoBox("There is only " + numberConflicts + " conflict.", "Warning: Conflict Detected" );
	//		}else{
	//			infoBox("There are " + numberConflicts + " conflicts.", "Warning: Conflict Detected" );
	//		}
	//		String allConflict = ""; 
	//		int conflictNo = 0;
	//		for(int i=0;i<displayList.size();i++){
	//			if(displayList.get(i)!=null){
	//				allConflict = allConflict + "Conflict" + " " + ++conflictNo + ":" + " " + displayList.get(i) + "\n";
	//				//infoBox(displayList.get(i),"Conflict Resolved");
	//			}			// Chimezie 
	//		}
	//		infoBox(allConflict, "Conflict Resolved");
	//	}

	public void compareRules(){
		int numberConflicts = 0;
		List<String> displayList = new ArrayList<>();
		ConflictAnalyser conflictAnalyser;
		List<ConflictAnalyser> conflicts = new ArrayList<>();
		Vector<SameTimeRule> consequences = new Vector<>();
		for(int i=0;i<rules.size();i++){
			ArrayList<SameTimeRule> group1 = new ArrayList<>();
			ArrayList<SameTimeRule> group2 = new ArrayList<>();
			group1.add(rules.get(i));
			
			for(int j=i+1;j<rules.size();j++){
				boolean repeated = false;
				for(int k=0;k<i;k++){
					if(rules.get(i).getConsequence().equals(rules.get(k).getConsequence())){
						repeated = true;
					}
				}
				
				if(!repeated){
					if(rules.get(i).getConsequence().equals(rules.get(j).getConsequence())){
						group1.add(rules.get(j));
					}else{
						if(rules.get(i).getConsequence().opposite(rules.get(j).getConsequence())){
							group2.add(rules.get(j));
						}
					}					
				}
				
				
				conflictAnalyser = new ConflictAnalyser(rules.get(i), rules.get(j));
				
//				if(conflictAnalyser.isConflict() && isNotRepeated(conflicts, conflictAnalyser)){
//					conflictAnalyser.solveConflict2();
//					conflicts.add(conflictAnalyser);
//					//Save conflicts
//
//					long millis=System.currentTimeMillis();  
//					java.sql.Date todayDate=new java.sql.Date(millis);  				
//					String temporalDate = todayDate.toString();	
//
//					String consequence1, consequence2;
//					consequence1 = rules.get(i).getConsequence().getName();
//					if(!rules.get(i).getConsequence().getStatus()){
//						consequence1 = "!" + consequence1;
//					}
//
//					consequence2 = rules.get(j).getConsequence().getName();
//					if(!rules.get(j).getConsequence().getStatus()){
//						consequence2 = "!" + consequence2;
//					}				
//
//					db.insertConflict(consequence1, consequence2);
//
//					numberConflicts ++;
//				}
//
//				displayList.add(conflictAnalyser.getDisplay());
			}
			
			if(group2.size()>0){
				System.out.println("There is conflict");
				consequence.add(compareGroups(group1,group2));
			}
		}
		
		db.dropResolvedConflictsTable();
		db.createResolvedConflictsTable(1,consequences);
		
//		System.out.println("There are " + conflicts.size() + " conflicts.");
//		if(conflicts.size() == 1){
//			infoBox2("There is only " + conflicts.size() + " conflict.", "Warning: Conflict Detected" );
//		}else{
//			infoBox2("There are " + conflicts.size() + " conflicts.", "Warning: Conflict Detected" );
//		}
//		
//		Vector<SameTimeRule> consequences = new Vector<>();
//		for(int i=0;i<conflicts.size();i++){
//			consequences.add(conflicts.get(i).getWinner());
//		}		
//		String allConflict = "";
//		
//		for(int i=0;i<displayList.size();i++){
//			if(displayList.get(i)!=null){
//				allConflict = allConflict + "Conflict" + " " + (i+1) + ":" + " " + displayList.get(i) + "\n";
//				//infoBox(displayList.get(i),"Conflict Resolved");
//			}
//		}
//		infoBox(allConflict, "Conflict Resolved");
	}

	private void compareGroups(ArrayList<SameTimeRule> group1, ArrayList<SameTimeRule> group2) {
		ConflictAnalyser conflictAnalyser;
		for(int i=0;i<group1.size();i++){
			for(int j=0;j<group2.size();j++){
				conflictAnalyser = new ConflictAnalyser(group1.get(i), group2.get(j));
				if(conflictAnalyser.isConflict()){
					if(conflictAnalyser.solveConflict1()){
						System.out.println("Conflict Analyser: " + conflictAnalyser.getWinner().getConsequence().getWholeName());
						System.out.println("Group1: " + group1.get(i).getConsequence().getWholeName());
						System.out.println("Group2: " + group2.get(j).getConsequence().getWholeName());
						if(!conflictAnalyser.getWinner().getConsequence().equals(group1.get(i).getConsequence())){
							group1.remove(i);
							System.out.println("Remove G1 - " + i);
							i--;
							break;
						}else{
							group2.remove(j);
							System.out.println("Remove G2 - " + j);
							j--;
						}
					}
				}
			}
		}
		if(group1.size()==0){
			System.out.println("Group 2 wins");
		}else{
			if(group2.size()==0){
				System.out.println("Group 1 wins");
			}else{
				System.out.println(group1.size() + " - " + group2.size());
				coinToss();
			}
		}
		
	}
	
	private void coinToss() {
		double coin = Math.random()*2;
		System.out.println("Coin value: " + coin);
		if (coin<=1){
			System.out.println("Group 1 wins");
		}else{
			System.out.println("Group 2 wins");
		}
	}

	private boolean isNotRepeated(List<ConflictAnalyser> conflicts, ConflictAnalyser conflictAnalyser) {
		// TODO Auto-generated method stub
		for(int i=0;i<conflicts.size();i++){
			if(conflicts.get(i).getRule1().getConsequence().equals(conflictAnalyser.getRule1().getConsequence()) || conflicts.get(i).getRule1().getConsequence().equals(conflictAnalyser.getRule2().getConsequence())){
				return false;
			}
		}
		return true;
	}

	public void infoBox(String infoMessage, String titleBar){
		JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
	}
	
	public void infoBox2(String infoMessage, String titleBar){
		JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.WARNING_MESSAGE);
	}
}


////	
////	public void compareRules(){
////		int numberConflicts = 0;
////		List<String> displayList = new ArrayList<>();
////		ConflictAnalyser conflictAnalyser;
////		for(int i=0;i<rules.size();i++){
////			for(int j=i+1;j<rules.size();j++){
////				conflictAnalyser = new ConflictAnalyser(rules.get(i),rules.get(j));
//////				if(rules.get(i).isConflict(rules.get(j))){ //not recent comment
////				if(conflictAnalyser.isConflict()){
////					//Save conflicts
////					this.connect();
////										
//////					long millis=System.currentTimeMillis();  
//////					java.sql.Date todayDate=new java.sql.Date(millis);  				
//////					String temporalDate = todayDate.toString();	
////					
////					String consequence1, consequence2, rule1Since, rule1Until, rule2Since, rule2Until;
////					consequence1 = rules.get(i).getConsequence().getName();
////					if(!rules.get(i).getConsequence().getStatus()){
////						consequence1 = "!" + consequence1;
////					}
//////					rule1Since = temporalDate + " " +rules.get(i).getTemporalOperators().get(0).getSinceValue().getTime_of_day().getTimeString();
//////					rule1Until = temporalDate + " " +rules.get(i).getTemporalOperators().get(0).getUntilValue().getTime_of_day().getTimeString();					
////					consequence2 = rules.get(j).getConsequence().getName();
////					if(!rules.get(j).getConsequence().getStatus()){
////						consequence2 = "!" + consequence2;
////					}
//////					rule2Since = temporalDate + " " +rules.get(j).getTemporalOperators().get(0).getSinceValue().getTime_of_day().getTimeString();
//////					rule2Until = temporalDate + " " +rules.get(j).getTemporalOperators().get(0).getUntilValue().getTime_of_day().getTimeString();
////					
////					
////					try{	
//////						String query = "INSERT INTO time_conflict (idConflict, rule1Consequence, rule1Begin, rule1End, rule2Consequence, rule2Begin, rule2End,  ConflictTimeBegin, ConflictTimeEnd, systemTime, occurrenceTime)"
//////								+" VALUES(null, '" + consequence1 + "', '" + rule1Since +  "', '" + rule1Until + "', '" + consequence2 +  "', '" + rule2Since + "', '" + rule2Until + "', '" + temporalDate + " " + conflictAnalyser.getConflictTimeBegin() + "', '" + temporalDate + " " + conflictAnalyser.getConflictTimeEnd() + "', current_timestamp, current_timestamp)";
////
////						String query = "INSERT INTO conflict (idconflict, rule1Consequence, rule2Consequence, occurrenceTime)"
////								+" VALUES(null, '" + consequence1 + "', '" + consequence2 +  "', current_timestamp)";
////
////					
////						System.out.println(query);
////						stmt.executeUpdate(query);
////					}
////					catch (SQLException e1) {
////						// TODO Auto-generated catch block
////						e1.printStackTrace();
////					}
////					numberConflicts ++;
////				}
////				
////				displayList.add(conflictAnalyser.getDisplay());
////			}
////		}
////		System.out.println("There are " + numberConflicts + " conflicts.");
////		if(numberConflicts == 1){
////			infoBox("There is only " + numberConflicts + " conflict.", "Warning: Conflict Detected" );
////		}else{
////			infoBox("There are " + numberConflicts + " conflicts.", "Warning: Conflict Detected" );
////		}
////		
////		for(int i=0;i<displayList.size();i++){
////			if(displayList.get(i)!=null){
////				infoBox(displayList.get(i),"Conflict Resolved");
////			}			
////		}
////	}
////	
////	public void infoBox(String infoMessage, String titleBar){
////        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
////    }
//
//}